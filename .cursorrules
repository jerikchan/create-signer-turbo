# Create Signer Turbo - Cursor AI Rules

## 项目概述
这是一个基于 Turborepo 的 Monorepo 应用项目模板，包含移动端、Web端和后端服务。

## 技术栈
- **Monorepo**: Turborepo + pnpm workspace
- **前端**: React 19, TypeScript, Vite, Expo
- **后端**: Hono, AWS Lambda, PostgreSQL
- **数据库**: Drizzle ORM, PostgreSQL
- **认证**: Better Auth
- **API**: tRPC
- **UI**: Radix UI, Tailwind CSS, shadcn/ui
- **AI**: Vercel AI SDK
- **云服务**: AWS (Lambda, S3, RDS)

## 项目结构
```
apps/
├── mobile/          # React Native + Expo 移动端
└── server-aws-lamda/ # AWS Lambda 后端服务

packages/
├── api/             # tRPC API 定义
├── db/              # 数据库层 (Drizzle ORM)
├── auth/            # 认证服务
├── ai/              # AI 功能集成
├── upload/       # S3 文件上传
├── logger/          # 日志服务
└── seed/            # 数据库种子数据

tooling/
├── eslint/          # ESLint 配置
├── prettier/        # Prettier 配置
├── typescript/      # TypeScript 配置
└── github/          # GitHub Actions
```

## 编码规范

### 通用规则
- 使用 TypeScript，严格类型检查
- 优先使用函数式编程和 React Hooks
- 遵循 ESLint 和 Prettier 配置
- 使用 pnpm 作为包管理器
- 所有包名使用 `@signer/` 前缀

### 命名约定
- 文件名使用 kebab-case: `user-profile.tsx`
- 组件名使用 PascalCase: `UserProfile`
- 函数和变量使用 camelCase: `getUserData`
- 常量使用 UPPER_SNAKE_CASE: `API_BASE_URL`
- 数据库表名使用 snake_case: `user_profile`

### React 组件规范
- 使用函数组件和 React Hooks
- 优先使用 TypeScript 接口定义 props
- 组件文件结构：
  ```tsx
  import { ... } from '...'
  
  interface ComponentProps {
    // props 定义
  }
  
  export const Component: React.FC<ComponentProps> = ({ ... }) => {
    // hooks
    // handlers
    // render
  }
  ```

### API 开发规范
- 使用 tRPC 定义 API 路由
- 所有输入使用 Zod 验证
- API 路由文件放在 `packages/api/src/router/`
- 数据库操作放在 `packages/db/src/actions/`

### 数据库规范
- 使用 Drizzle ORM 定义 schema
- 表名使用单数形式: `User`, `Post`
- 外键使用 `_id` 后缀: `user_id`
- 时间戳字段: `created_at`, `updated_at`
- 软删除使用 `deleted_at` 字段

### 样式规范
- 使用 Tailwind CSS 进行样式开发
- 优先使用 Radix UI 组件
- 自定义组件放在各应用的 `components/` 目录
- 共享 UI 组件考虑放在 `packages/ui/`

### 错误处理
- 使用 Result 模式或 try-catch
- API 错误使用 tRPC 错误处理
- 前端错误使用 Error Boundary
- 记录错误到日志系统

### 测试规范
- 单元测试使用 Vitest
- 组件测试使用 React Testing Library
- E2E 测试使用 Playwright
- 测试文件命名: `*.test.ts` 或 `*.spec.ts`

## 开发工作流

### 新功能开发
1. 在相应的 `packages/` 中定义数据模型和 API
2. 在 `apps/` 中实现前端界面
3. 确保类型安全和错误处理
4. 添加必要的测试
5. 更新文档

### 包依赖管理
- 应用层 (`apps/`) 可以依赖包层 (`packages/`)
- 包层之间避免循环依赖
- 使用回调函数或适配器模式解耦
- 共享依赖在根 `package.json` 中管理

### 部署规范
- 使用 Turborepo 的增量构建
- 移动端通过 Expo 发布
- Web 端部署到 Vercel 或 AWS
- 后端部署到 AWS Lambda
- 数据库使用 AWS RDS

## AI 辅助开发指导

### 代码生成偏好
- 生成完整的 TypeScript 类型定义
- 包含错误处理和边界情况
- 遵循项目的文件结构和命名约定
- 生成相应的 Zod 验证 schema
- 包含必要的导入语句

### 重构建议
- 优先考虑类型安全
- 保持包之间的解耦
- 遵循单一职责原则
- 考虑性能优化（特别是移动端）
- 保持代码的可测试性

### 医疗应用特殊考虑
- 数据隐私和安全性
- 用户权限和角色管理
- 审计日志和数据追溯
- 符合医疗行业规范
- 错误处理要特别谨慎

## 常用命令
```bash
# 安装依赖
pnpm install

# 开发模式
pnpm dev                    # 启动移动端

# 构建
pnpm build                 # 构建所有应用

# 代码质量
pnpm lint                  # 代码检查
pnpm format                # 代码格式化
pnpm typecheck             # 类型检查

# 数据库
pnpm db:push               # 推送数据库 schema
pnpm db:studio             # 打开数据库管理界面
pnpm seed                  # 运行种子数据

# 添加 UI 组件
pnpm ui-add                # 添加 shadcn/ui 组件
```

## 注意事项
- 移动端性能优化很重要
- 保持 API 的向后兼容性
- 定期更新依赖和安全补丁
- 遵循无障碍访问标准 (a11y) 